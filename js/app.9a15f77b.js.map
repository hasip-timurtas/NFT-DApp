{"version":3,"file":"js/app.9a15f77b.js","mappings":"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","sources":["webpack://nft-dapp/./src/App.vue","webpack://nft-dapp/./src/components/MintToken.vue","webpack://nft-dapp/./src/components/WalletButton.vue","webpack://nft-dapp/./src/components/WalletButton.vue?081f","webpack://nft-dapp/./src/components/MintForm.vue","webpack://nft-dapp/./src/components/MintForm.vue?ba8e","webpack://nft-dapp/./src/components/OwnedNfts.vue","webpack://nft-dapp/./src/components/OwnedNfts.vue?7462","webpack://nft-dapp/./src/components/TransferModal.vue","webpack://nft-dapp/./src/components/TransferModal.vue?2fea","webpack://nft-dapp/./src/lib/constants.js","webpack://nft-dapp/./src/lib/pinata.js","webpack://nft-dapp/./src/lib/web3-interact.js","webpack://nft-dapp/./src/components/MintToken.vue?f397","webpack://nft-dapp/./src/App.vue?7ccd","webpack://nft-dapp/./src/main.js","webpack://nft-dapp/webpack/bootstrap","webpack://nft-dapp/webpack/runtime/chunk loaded","webpack://nft-dapp/webpack/runtime/compat get default export","webpack://nft-dapp/webpack/runtime/define property getters","webpack://nft-dapp/webpack/runtime/global","webpack://nft-dapp/webpack/runtime/hasOwnProperty shorthand","webpack://nft-dapp/webpack/runtime/make namespace object","webpack://nft-dapp/webpack/runtime/jsonp chunk loading","webpack://nft-dapp/webpack/startup"],"sourcesContent":["<template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\" />\n  <MintToken />\n</template>\n\n<script>\nimport MintToken from \"./components/MintToken.vue\";\n\nexport default {\n  name: \"App\",\n  components: {\n    MintToken,\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<template>\n  <div class=\"nft-minter\">\n    <WalletButton :walletAddress=\"walletAddress\" @connect-wallet=\"handleWalletConnection\" />\n    <MintForm @file-change=\"handleFileChange\" @mint-nft=\"handleMinting\" />\n    <hr />\n    <OwnedNfts :nfts=\"ownedNfts\" @load-nfts=\"fetchMyNFTs\" @transfer-nft=\"openTransferModal\" />\n    <hr />\n    <p id=\"transactionStatus\" v-if=\"statusMessage\" :style=\"{ color: 'red' }\">\n      {{ statusMessage }}\n    </p>\n    <TransferModal :show=\"showModal\" :tokenId=\"selectedTokenId\" @confirm-transfer=\"confirmTransfer\"\n      @close-modal=\"closeTransferModal\" />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport WalletButton from './WalletButton.vue';\nimport MintForm from './MintForm.vue';\nimport OwnedNfts from './OwnedNfts.vue';\nimport TransferModal from './TransferModal.vue';\n\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintToken,\n  transferNFT,\n  fetchOwnedNFTs,\n} from '../lib/web3-interact';\n\nexport default {\n  components: {\n    WalletButton,\n    MintForm,\n    OwnedNfts,\n    TransferModal,\n  },\n  setup() {\n    const walletAddress = ref(null);\n    const statusMessage = ref('');\n\n    const assetFile = ref(null);\n    const ownedNfts = ref([]);\n\n    const showModal = ref(false);\n    const selectedTokenId = ref(null);\n\n    onMounted(async () => {\n      const { address, status } = await getCurrentWalletConnected();\n      walletAddress.value = address;\n      statusMessage.value = status;\n\n      if (walletAddress.value) {\n        await fetchMyNFTs();\n      }\n      listenForAccountChanges();\n    });\n\n    /**\n     * Listens for changes in the user's Ethereum accounts.\n     * Updates the wallet address and fetches NFTs when the account changes.\n     * Cleans up the event listener when the component is unmounted.\n     */\n    function listenForAccountChanges() {\n      if (window.ethereum) {\n        const handleAccountsChanged = async (accounts) => {\n          if (accounts.length > 0) {\n            walletAddress.value = accounts[0];\n            statusMessage.value = 'Wallet changed. Fetching your NFTs...';\n            await fetchMyNFTs(); // Fetch NFTs when wallet changes\n          } else {\n            walletAddress.value = null;\n            ownedNfts.value = []; // Clear NFTs when no wallet is connected\n            statusMessage.value = 'Please connect to MetaMask.';\n          }\n        };\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n\n        onUnmounted(() => {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        });\n      } else {\n        statusMessage.value =\n          'MetaMask is not installed. Please install MetaMask from https://metamask.io/download.html';\n      }\n    }\n\n    /**\n     * Handles the wallet connection process.\n     * Updates the wallet address and fetches NFTs if connection is successful.\n     */\n    const handleWalletConnection = async () => {\n      try {\n        const { address, status } = await connectWallet();\n        walletAddress.value = address;\n        statusMessage.value = status;\n        if (walletAddress.value) {\n          await fetchMyNFTs();\n        }\n      } catch (error) {\n        statusMessage.value = `Error connecting wallet: ${error.message}`;\n      }\n    };\n\n    /**\n     * Handles file input change event from the MintForm component.\n     * @param {File} file - The selected file.\n     */\n    const handleFileChange = (file) => {\n      assetFile.value = file;\n    };\n\n    /**\n     * Handles the minting of a new NFT.\n     * Uses the selected file to mint a token and updates the status message.\n     */\n    const handleMinting = async () => {\n      if (!assetFile.value) {\n        statusMessage.value = 'Please upload an image file.';\n        return;\n      }\n      try {\n        const { success, status } = await mintToken(assetFile.value);\n        statusMessage.value = status;\n        if (success) {\n          resetMintForm();\n          await fetchMyNFTs(); // Refresh the list after minting\n        }\n      } catch (error) {\n        statusMessage.value = `Error minting NFT: ${error.message}`;\n      }\n    };\n\n    /**\n     * Opens the transfer modal for a specific token ID.\n     * @param {string|number} tokenId - The ID of the token to transfer.\n     */\n    const openTransferModal = (tokenId) => {\n      selectedTokenId.value = tokenId;\n      showModal.value = true;\n    };\n\n    /**\n     * Closes the transfer modal and resets the selected token ID.\n     */\n    const closeTransferModal = () => {\n      showModal.value = false;\n      selectedTokenId.value = null;\n    };\n\n    /**\n     * Confirms the transfer of the NFT to the specified recipient address.\n     * @param {string} recipientAddress - The Ethereum address of the recipient.\n     */\n    const confirmTransfer = async (recipientAddress) => {\n      if (!recipientAddress.trim()) {\n        statusMessage.value = 'Please provide a valid recipient address.';\n        return;\n      }\n      try {\n        const { success, status } = await transferNFT(selectedTokenId.value, recipientAddress);\n        statusMessage.value = status;\n        if (success) {\n          await fetchMyNFTs(); // Refresh the list after transfer\n          closeTransferModal();\n        }\n      } catch (error) {\n        statusMessage.value = `Error transferring NFT: ${error.message}`;\n      }\n    };\n\n    /**\n     * Fetches the NFTs owned by the connected wallet address.\n     * Updates the list of owned NFTs and the status message.\n     */\n    const fetchMyNFTs = async () => {\n      if (!walletAddress.value) {\n        statusMessage.value = 'Connect your wallet to view your NFTs.';\n        return;\n      }\n      try {\n        const { nfts, status } = await fetchOwnedNFTs(walletAddress.value);\n        ownedNfts.value = nfts;\n        statusMessage.value = status;\n      } catch (error) {\n        statusMessage.value = `Error fetching NFTs: ${error.message}`;\n      }\n    };\n\n    /**\n     * Resets the minting form by clearing the selected asset file.\n     * Optionally resets the MintForm component if necessary.\n     */\n    function resetMintForm() {\n      assetFile.value = null;\n      // Optionally, reset the MintForm component if it maintains internal state\n      // This could be done via a ref or by emitting an event\n    }\n\n    return {\n      walletAddress,\n      statusMessage,\n      ownedNfts,\n      showModal,\n      selectedTokenId,\n      handleWalletConnection,\n      handleMinting,\n      handleFileChange,\n      openTransferModal,\n      closeTransferModal,\n      confirmTransfer,\n      fetchMyNFTs,\n    };\n  },\n};\n</script>\n","<template>\n    <button id=\"walletButton\" @click=\"handleWalletConnection\"\n        :aria-label=\"walletAddress ? 'Wallet connected' : 'Connect wallet'\">\n        {{ buttonText }}\n    </button>\n</template>\n\n<script>\nexport default {\n    /**\n     * Component for displaying and handling wallet connection.\n     * @component\n     * @prop {string|null} walletAddress - The connected wallet address, or null if not connected.\n     * @emits connect-wallet - Emitted when the user clicks the button to connect the wallet.\n     */\n    props: {\n        walletAddress: {\n            type: String,\n            default: null,\n        },\n    },\n    computed: {\n        /**\n         * Computes the button text based on the wallet connection status.\n         * @returns {string} The button text.\n         */\n        buttonText() {\n            if (this.walletAddress) {\n                const start = this.walletAddress.slice(0, 6);\n                const end = this.walletAddress.slice(-4);\n                return `Connected: ${start}...${end}`;\n            }\n            return 'Connect Wallet';\n        },\n    },\n    methods: {\n        /**\n         * Emits the 'connect-wallet' event when the button is clicked.\n         */\n        handleWalletConnection() {\n            this.$emit('connect-wallet');\n        },\n    },\n};\n</script>\n\n<style scoped></style>","import { render } from \"./WalletButton.vue?vue&type=template&id=50d4125a\"\nimport script from \"./WalletButton.vue?vue&type=script&lang=js\"\nexport * from \"./WalletButton.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div>\n        <h1 id=\"pageTitle\">NFT Minting Tool</h1>\n        <p>Upload an image and click \"Mint\" to create your NFT.</p>\n\n        <form @submit.prevent=\"handleMinting\">\n            <label for=\"assetFile\">Asset File:</label>\n            <input id=\"assetFile\" type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" required />\n            <button type=\"submit\" id=\"mintNFTButton\">Mint NFT</button>\n        </form>\n\n        <p v-if=\"statusMessage\">{{ statusMessage }}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            file: null,\n            statusMessage: '',\n        };\n    },\n    methods: {\n        /**\n         * Handles the file input change event.\n         * @param {Event} event - The file input change event.\n         */\n        handleFileChange(event) {\n            this.file = event.target.files[0];\n            this.$emit('file-change', this.file);\n        },\n        /**\n         * Handles the form submission to mint the NFT.\n         */\n        handleMinting() {\n            if (!this.file) {\n                this.statusMessage = 'Please select a file before minting.';\n                return;\n            }\n\n            this.statusMessage = '';\n            // Emit the 'mint-nft' event with the selected file\n            this.$emit('mint-nft', this.file);\n        },\n    },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>","import { render } from \"./MintForm.vue?vue&type=template&id=7674d50e&scoped=true\"\nimport script from \"./MintForm.vue?vue&type=script&lang=js\"\nexport * from \"./MintForm.vue?vue&type=script&lang=js\"\n\nimport \"./MintForm.vue?vue&type=style&index=0&id=7674d50e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7674d50e\"]])\n\nexport default __exports__","<template>\n    <div>\n        <h2 id=\"ownedNftsTitle\">Your NFTs</h2>\n        <button @click=\"loadNFTs\">Load My NFTs</button>\n        <div class=\"owned-nfts\" v-if=\"nfts && nfts.length > 0\">\n            <div class=\"nft\" v-for=\"nft in nfts\" :key=\"nft.tokenId\">\n                <img :src=\"nft.tokenURI\" :alt=\"`NFT Image ${nft.tokenId}`\" @error=\"onImageError\" />\n                <p>Token ID: {{ nft.tokenId }}</p>\n                <button @click=\"transferNFT(nft.tokenId)\">Transfer</button>\n            </div>\n        </div>\n        <p v-else>No NFTs found for this wallet.</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    /**\n     * Component to display the user's owned NFTs.\n     * @component\n     * @prop {Array} nfts - Array of NFT objects with tokenId and tokenURI.\n     * @emits load-nfts - Emitted when the user clicks the 'Load My NFTs' button.\n     * @emits transfer-nft - Emitted when the user clicks the 'Transfer' button for an NFT.\n     */\n    props: {\n        nfts: {\n            type: Array,\n            default: () => [],\n        },\n    },\n    methods: {\n        /**\n         * Emits the 'load-nfts' event to load NFTs.\n         */\n        loadNFTs() {\n            this.$emit('load-nfts');\n        },\n        /**\n         * Emits the 'transfer-nft' event with the specified tokenId.\n         * @param {string|number} tokenId - The ID of the token to transfer.\n         */\n        transferNFT(tokenId) {\n            this.$emit('transfer-nft', tokenId);\n        },\n        /**\n         * Handles image load errors by setting a placeholder image.\n         * @param {Event} event - The error event from the image.\n         */\n        onImageError(event) {\n            event.target.src = 'path/to/placeholder/image.png'; // Replace with your placeholder image path\n        },\n    },\n};\n</script>\n\n<style scoped>\n.owned-nfts {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.nft {\n    text-align: center;\n    max-width: 150px;\n}\n\n.nft img {\n    max-width: 100%;\n    height: auto;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 5px;\n    background-color: #f9f9f9;\n}\n</style>","import { render } from \"./OwnedNfts.vue?vue&type=template&id=44b7455a&scoped=true\"\nimport script from \"./OwnedNfts.vue?vue&type=script&lang=js\"\nexport * from \"./OwnedNfts.vue?vue&type=script&lang=js\"\n\nimport \"./OwnedNfts.vue?vue&type=style&index=0&id=44b7455a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-44b7455a\"]])\n\nexport default __exports__","<template>\n    <div v-if=\"show\" class=\"modal-overlay\">\n        <div class=\"modal\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modalTitle\">\n            <h3 id=\"modalTitle\">Transfer NFT</h3>\n            <p>Token ID: {{ tokenId }}</p>\n            <label for=\"recipientAddress\">Recipient Address:</label>\n            <input id=\"recipientAddress\" type=\"text\" placeholder=\"Enter recipient's wallet address\"\n                v-model=\"recipientAddress\" @input=\"validateAddress\" :aria-invalid=\"!isAddressValid\"\n                aria-describedby=\"addressError\" />\n            <p v-if=\"!isAddressValid\" id=\"addressError\" class=\"error-message\">\n                Please enter a valid Ethereum address.\n            </p>\n            <button @click=\"confirmTransfer\" :disabled=\"!isAddressValid\">Confirm Transfer</button>\n            <button @click=\"closeModal\">Cancel / Done</button>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    /**\n     * Component for transferring an NFT to another wallet.\n     * @component\n     * @prop {boolean} show - Determines whether the modal is visible.\n     * @prop {string|number} tokenId - The ID of the token to transfer.\n     * @emits confirm-transfer - Emitted when the user confirms the transfer.\n     * @emits close-modal - Emitted when the user closes the modal.\n     */\n    props: {\n        show: {\n            type: Boolean,\n            required: true,\n        },\n        tokenId: {\n            type: [String, Number],\n            required: true,\n        },\n    },\n    data() {\n        return {\n            recipientAddress: '',\n            isAddressValid: true,\n        };\n    },\n    methods: {\n        /**\n         * Validates the recipient Ethereum address.\n         * Sets the isAddressValid flag accordingly.\n         */\n        validateAddress() {\n            const regex = /^(0x)?[0-9a-fA-F]{40}$/;\n            this.isAddressValid = regex.test(this.recipientAddress.trim());\n        },\n        /**\n         * Emits the 'confirm-transfer' event with the recipient address.\n         * Validates the address before emitting.\n         */\n        confirmTransfer() {\n            if (this.isAddressValid) {\n                this.$emit('confirm-transfer', this.recipientAddress.trim());\n            } else {\n                // Additional error handling if necessary\n            }\n        },\n        /**\n         * Emits the 'close-modal' event to close the modal.\n         * Resets the form fields.\n         */\n        closeModal() {\n            this.recipientAddress = '';\n            this.isAddressValid = true;\n            this.$emit('close-modal');\n        },\n    },\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.7);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n\n.modal {\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    max-width: 400px;\n    width: 100%;\n    text-align: center;\n}\n\n.modal h3 {\n    margin-bottom: 20px;\n}\n\n.modal button {\n    margin-top: 20px;\n    margin-right: 10px;\n    padding: 10px 20px;\n}\n\n.modal input {\n    width: 100%;\n    padding: 10px;\n    margin-top: 10px;\n    box-sizing: border-box;\n}\n\n.error-message {\n    color: red;\n    font-size: 0.9em;\n}\n</style>","import { render } from \"./TransferModal.vue?vue&type=template&id=7e4bce00&scoped=true\"\nimport script from \"./TransferModal.vue?vue&type=script&lang=js\"\nexport * from \"./TransferModal.vue?vue&type=script&lang=js\"\n\nimport \"./TransferModal.vue?vue&type=style&index=0&id=7e4bce00&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7e4bce00\"]])\n\nexport default __exports__","const nftContractAddress = '0x4eac82370f75f1b1d29b0fbdba0710e995a7d14b'; // the contract I uploaded to Sepolia testnet\nconst infuraProjectId = process.env.VUE_APP_INFURA_PROJECT_ID;\nconst pinataKey = process.env.VUE_APP_PINATA_KEY;\nconst pinataSecret = process.env.VUE_APP_PINATA_SECRET;\n\nexport {\n  infuraProjectId,\n  nftContractAddress,\n  pinataKey,\n  pinataSecret\n}","import { pinataKey, pinataSecret } from './constants';\n\nexport const uploadImageToIpfs = async (file) => {\n  const endpoint = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'pinata_api_key': pinataKey,\n        'pinata_secret_api_key': pinataSecret,\n      },\n      body: formData,\n    });\n\n    const result = await response.json();\n\n    if (response.ok) {\n      return {\n        success: true,\n        pinataUrl: `https://gateway.pinata.cloud/ipfs/${result.IpfsHash}`,\n      };\n    } else {\n      throw new Error(result.error || 'Failed to pin file to IPFS');\n    }\n  } catch (error) {\n    console.error('Error uploading file to IPFS:', error);\n    return {\n      success: false,\n      message: error.message,\n    };\n  }\n};\n","import { ethers } from 'ethers';\nimport { nftContractAddress } from './constants';\nimport { uploadImageToIpfs } from './pinata.js';\nimport contractABI from '../MhtNFT-contract-abi.json';\n\n/**\n * Retrieves the Ethereum provider and signer from the user's wallet.\n * @async\n * @returns {Promise<{ provider: ethers.providers.Web3Provider, signer: ethers.Signer }>}\n * The provider and signer objects.\n * @throws Will throw an error if the Ethereum provider is not found.\n */\nasync function getProviderAndSigner() {\n  if (!window.ethereum) {\n    throw new Error('Ethereum provider not found. Please install MetaMask.');\n  }\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  return { provider, signer };\n}\n\n/**\n * Initializes and returns an instance of the NFT contract connected with the signer.\n * @async\n * @returns {Promise<ethers.Contract>} The initialized contract instance.\n */\nasync function initializeContract() {\n  const { signer } = await getProviderAndSigner();\n  return new ethers.Contract(nftContractAddress, contractABI, signer);\n}\n\n/**\n * Connects the user's wallet using MetaMask.\n * @async\n * @returns {Promise<{ status: string, address?: string }>}\n * An object containing the connection status and the connected address if successful.\n */\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    return {\n      status:\n        'MetaMask is not installed. Please install MetaMask to connect your wallet.',\n    };\n  }\n\n  try {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const { signer } = await getProviderAndSigner();\n    const address = await signer.getAddress();\n\n    return {\n      status: 'Wallet connected successfully.',\n      address,\n    };\n  } catch (err) {\n    console.error('Error connecting wallet:', err);\n    return {\n      status:\n        err.code === 4001\n          ? 'Connection request was denied by the user.'\n          : `An error occurred: ${err.message}`,\n    };\n  }\n};\n\n/**\n * Checks if the user's wallet is currently connected.\n * @async\n * @returns {Promise<{ address: string | null, status: string }>}\n * An object containing the connected address and a status message.\n */\nexport const getCurrentWalletConnected = async () => {\n  if (!window.ethereum) {\n    return {\n      address: null,\n      status:\n        'MetaMask is not installed. Please install MetaMask to connect your wallet.',\n    };\n  }\n\n  try {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts',\n    });\n    if (accounts.length > 0) {\n      return {\n        address: accounts[0],\n        status: 'Wallet connected successfully.',\n      };\n    } else {\n      return {\n        address: null,\n        status: 'Please connect your wallet using the Connect Wallet button.',\n      };\n    }\n  } catch (err) {\n    console.error('Error checking wallet connection:', err);\n    return {\n      address: null,\n      status: `An error occurred: ${err.message}`,\n    };\n  }\n};\n\n/**\n * Mints a new NFT by uploading an image to IPFS and interacting with the NFT smart contract.\n * @async\n * @param {File} file - The image file to be uploaded and minted as an NFT.\n * @returns {Promise<{ success: boolean, status: string }>}\n * An object indicating the success status and a message.\n */\nexport const mintToken = async (file) => {\n  if (!file) {\n    return {\n      success: false,\n      status: 'Please upload an image file before minting.',\n    };\n  }\n\n  const imageResponse = await uploadImageToIpfs(file);\n  if (!imageResponse.success) {\n    return {\n      success: false,\n      status: 'An error occurred while uploading the image to IPFS.',\n    };\n  }\n\n  const imageUrl = imageResponse.pinataUrl;\n\n  try {\n    const { signer } = await getProviderAndSigner();\n    const address = await signer.getAddress();\n    const contract = await initializeContract();\n\n    const tx = await contract.mintNFT(address, imageUrl);\n    await tx.wait();\n\n    return {\n      success: true,\n      status: `Transaction successful! View it on Etherscan: https://sepolia.etherscan.io/tx/${tx.hash}`,\n    };\n  } catch (error) {\n    console.error('Failed to mint the NFT:', error);\n    return {\n      success: false,\n      status: `Failed to mint the NFT: ${error.message}`,\n    };\n  }\n};\n\n/**\n * Transfers an NFT from the connected wallet to a recipient address.\n * @async\n * @param {string | number} tokenId - The ID of the token to transfer.\n * @param {string} recipientAddress - The Ethereum address of the recipient.\n * @returns {Promise<{ success: boolean, status: string }>}\n * An object indicating the success status and a message.\n */\nexport const transferNFT = async (tokenId, recipientAddress) => {\n  if (!tokenId || !recipientAddress.trim()) {\n    return {\n      success: false,\n      status: 'Token ID and recipient address are required for transfer.',\n    };\n  }\n\n  try {\n    const contract = await initializeContract();\n    const { signer } = await getProviderAndSigner();\n    const address = await signer.getAddress();\n\n    const tx = await contract.transferFrom(\n      address,\n      recipientAddress.trim(),\n      tokenId\n    );\n    await tx.wait();\n\n    return {\n      success: true,\n      status: `NFT transferred successfully! View it on Etherscan: https://sepolia.etherscan.io/tx/${tx.hash}`,\n    };\n  } catch (error) {\n    console.error('Failed to transfer the NFT:', error);\n    return {\n      success: false,\n      status: `Failed to transfer the NFT: ${error.message}`,\n    };\n  }\n};\n\n/**\n * Fetches the NFTs owned by a specific wallet address.\n * @async\n * @param {string} walletAddress - The Ethereum address of the wallet to fetch NFTs for.\n * @returns {Promise<{ success: boolean, nfts?: Array<{ tokenId: string, tokenURI: string }>, status: string }>}\n * An object indicating the success status, a list of NFTs, and a message.\n */\nexport const fetchOwnedNFTs = async (walletAddress) => {\n  if (!walletAddress || !walletAddress.trim()) {\n    return {\n      success: false,\n      status: 'Wallet address is required to fetch NFTs.',\n    };\n  }\n\n  try {\n    const { address } = await getCurrentWalletConnected();\n\n    if (!address) {\n      return {\n        success: false,\n        status: 'Wallet is not connected. Please connect your wallet.',\n      };\n    }\n\n    const contract = await initializeContract();\n    const balanceBN = await contract.balanceOf(walletAddress);\n    const balance = balanceBN.toString();\n    const nfts = [];\n\n    for (let i = 0; i < balance; i++) {\n      const tokenIdBN = await contract.tokenOfOwnerByIndex(walletAddress, i);\n      const tokenId = tokenIdBN.toString();\n      const tokenURI = await contract.tokenURI(tokenId);\n      nfts.push({ tokenId, tokenURI });\n    }\n\n    return {\n      success: true,\n      nfts,\n      status: 'NFTs fetched successfully.',\n    };\n  } catch (error) {\n    console.error('Failed to fetch NFTs:', error);\n    return {\n      success: false,\n      status: `Failed to fetch NFTs: ${error.message}`,\n    };\n  }\n};\n","import { render } from \"./MintToken.vue?vue&type=template&id=fd708948\"\nimport script from \"./MintToken.vue?vue&type=script&lang=js\"\nexport * from \"./MintToken.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=712aae26\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=712aae26&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunknft_dapp\"] = self[\"webpackChunknft_dapp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(4606); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementBlock","_Fragment","_createElementVNode","alt","src","_imports_0","_createVNode","_component_MintToken","class","key","id","style","color","_hoisted_1","_component_WalletButton","walletAddress","$setup","onConnectWallet","handleWalletConnection","_component_MintForm","onFileChange","handleFileChange","onMintNft","handleMinting","_component_OwnedNfts","nfts","ownedNfts","onLoadNfts","fetchMyNFTs","onTransferNft","openTransferModal","statusMessage","_hoisted_2","_toDisplayString","_createCommentVNode","_component_TransferModal","show","showModal","tokenId","selectedTokenId","onConfirmTransfer","confirmTransfer","onCloseModal","closeTransferModal","onClick","_cache","args","$options","$props","buttonText","props","type","String","default","computed","this","start","slice","end","methods","$emit","__exports__","onSubmit","_withModifiers","for","onChange","accept","required","$data","data","file","event","target","files","loadNFTs","length","_renderList","nft","tokenURI","onError","onImageError","$event","transferNFT","_hoisted_3","_hoisted_4","Array","role","placeholder","recipientAddress","onInput","validateAddress","isAddressValid","disabled","_hoisted_5","closeModal","Boolean","Number","regex","test","trim","nftContractAddress","pinataKey","process","pinataSecret","uploadImageToIpfs","async","endpoint","formData","FormData","append","response","fetch","method","headers","body","result","json","ok","success","pinataUrl","IpfsHash","Error","error","console","message","getProviderAndSigner","window","ethereum","provider","ethers","signer","getSigner","initializeContract","contractABI","connectWallet","status","request","address","getAddress","err","code","getCurrentWalletConnected","accounts","mintToken","imageResponse","imageUrl","contract","tx","mintNFT","wait","hash","transferFrom","fetchOwnedNFTs","balanceBN","balanceOf","balance","toString","i","tokenIdBN","tokenOfOwnerByIndex","push","components","WalletButton","MintForm","OwnedNfts","TransferModal","setup","ref","assetFile","listenForAccountChanges","handleAccountsChanged","value","on","onUnmounted","removeListener","onMounted","resetMintForm","name","MintToken","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}